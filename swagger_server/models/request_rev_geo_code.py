# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.base_request import BaseRequest  # noqa: F401,E501
from swagger_server.models.customer_rev_geo_code import CustomerRevGeoCode  # noqa: F401,E501
from swagger_server import util


class RequestRevGeoCode(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, channel: str=None, external_transaction_id: str=None, customer: CustomerRevGeoCode=None):  # noqa: E501
        """RequestRevGeoCode - a model defined in Swagger

        :param channel: The channel of this RequestRevGeoCode.  # noqa: E501
        :type channel: str
        :param external_transaction_id: The external_transaction_id of this RequestRevGeoCode.  # noqa: E501
        :type external_transaction_id: str
        :param customer: The customer of this RequestRevGeoCode.  # noqa: E501
        :type customer: CustomerRevGeoCode
        """
        self.swagger_types = {
            'channel': str,
            'external_transaction_id': str,
            'customer': CustomerRevGeoCode
        }

        self.attribute_map = {
            'channel': 'channel',
            'external_transaction_id': 'externalTransactionId',
            'customer': 'customer'
        }
        self._channel = channel
        self._external_transaction_id = external_transaction_id
        self._customer = customer

    @classmethod
    def from_dict(cls, dikt) -> 'RequestRevGeoCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestRevGeoCode of this RequestRevGeoCode.  # noqa: E501
        :rtype: RequestRevGeoCode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self) -> str:
        """Gets the channel of this RequestRevGeoCode.


        :return: The channel of this RequestRevGeoCode.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel: str):
        """Sets the channel of this RequestRevGeoCode.


        :param channel: The channel of this RequestRevGeoCode.
        :type channel: str
        """

        self._channel = channel

    @property
    def external_transaction_id(self) -> str:
        """Gets the external_transaction_id of this RequestRevGeoCode.


        :return: The external_transaction_id of this RequestRevGeoCode.
        :rtype: str
        """
        return self._external_transaction_id

    @external_transaction_id.setter
    def external_transaction_id(self, external_transaction_id: str):
        """Sets the external_transaction_id of this RequestRevGeoCode.


        :param external_transaction_id: The external_transaction_id of this RequestRevGeoCode.
        :type external_transaction_id: str
        """

        self._external_transaction_id = external_transaction_id

    @property
    def customer(self) -> CustomerRevGeoCode:
        """Gets the customer of this RequestRevGeoCode.


        :return: The customer of this RequestRevGeoCode.
        :rtype: CustomerRevGeoCode
        """
        return self._customer

    @customer.setter
    def customer(self, customer: CustomerRevGeoCode):
        """Sets the customer of this RequestRevGeoCode.


        :param customer: The customer of this RequestRevGeoCode.
        :type customer: CustomerRevGeoCode
        """

        self._customer = customer
